package com.bridgeLabz.objectOrientedPrograms;

import java.io.File;
import java.io.IOException;
import java.util.List;

import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import utility.Util;

public class StockAccount {
	String buyer;
	int balance_of_buyer = 0;

	String path_of_stockHolder = "/home/user/eclipse-workspace/com.bridgeLabz.OOP/src/main/java/com/bridgeLabz/objectOrientedPrograms/stockholders.json";
	String path_of_companies = "/home/user/eclipse-workspace/com.bridgeLabz.OOP/src/main/java/com/bridgeLabz/objectOrientedPrograms/companies.json";

	// Read Stock Holders
	public List<StockHolders> readStockHolder() throws JsonParseException, JsonMappingException, IOException {
		ObjectMapper mapper = new ObjectMapper();
		List<StockHolders> list_of_buyers = mapper.readValue(new File(path_of_stockHolder),
				new TypeReference<List<StockHolders>>() {
				});
		return list_of_buyers;
	}

	// Read Companies
	public List<Companies> readCompanies() throws JsonParseException, JsonMappingException, IOException {
		ObjectMapper mapper = new ObjectMapper();
		List<Companies> list_of_companies = mapper.readValue(new File(path_of_companies),
				new TypeReference<List<Companies>>() {
				});
		return list_of_companies;
	}

	void buy(int amount, String symbol) throws JsonParseException, JsonMappingException, IOException {
		List<StockHolders> list_of_buyers = readStockHolder();
		List<Companies> list_of_companies = readCompanies();

		System.out.println("Enter name of buyer");
		String buyer = Util.readString();

		int flag_buyer_cheak = 0, flag_symbol_cheak = 0;

		for (StockHolders i : list_of_buyers) {
			if (buyer.equals(i.getName())) {
				flag_buyer_cheak = 1;
				balance_of_buyer = i.getBalance();
				break;
			}
		}

		// Check buyer has account
		if (flag_buyer_cheak != 1) {
			System.out.println("Buyer has no account");
			return;
		}

		// Check buyer have sufficient balance
		if (amount > balance_of_buyer) {
			System.out.println("Entered Amount is greater than balance");
			return;
		}
		int number_of_shares_avaliable = 0;
		int price_per_share = 0;
		for (Companies i : list_of_companies) {
			if (symbol.equals(i.getSymbol())) {
				flag_symbol_cheak = 1;
				number_of_shares_avaliable = i.getShares();
				price_per_share = i.getPrice();
				break;
			}
		}
		// Check buyer enterd sufficient amount to buy atleast one share
		if (amount < price_per_share) {
			System.out.println("Entered amount is less than price of one share");
			return;
		}

		// Check requested company is listed at Stock exchange
		if (flag_symbol_cheak != 1) {
			System.out.println("Requested company is not listesd in stock exchange");
			return;
		}

		// Check sufficent number of shares are present
		if (number_of_shares_avaliable * price_per_share < amount) {
			System.out.println("Unsufficient number of shares are present");
			return;
		}
		int number_of_shares_bought = amount / price_per_share;
		int total_value_of_shares = number_of_shares_bought * price_per_share;

		for (StockHolders i : list_of_buyers) {
			if (buyer.equals(i.getName())) {
				// Reducing balance of buyer account
				i.setBalance(i.getBalance() - total_value_of_shares);

				// adding Bought Share symbol to buyer account
				int size_of_share_holdings = i.getShareholding().length + 1;
				String share_holdings[] = new String[size_of_share_holdings];
				String[] temp = i.getShareholding();
				System.arraycopy(temp, 0, share_holdings, 0, temp.length);
				share_holdings[size_of_share_holdings - 1] = symbol;
				i.setShareholding(share_holdings);

				// Adding Bought share quantity to buyer account
				int size_of_quantity = i.getQuantity().length + 1;
				int quantity[] = new int[size_of_quantity];
				int temp1[] = i.getQuantity();
				System.arraycopy(temp1, 0, quantity, 0, temp1.length);
				quantity[size_of_quantity-1]=number_of_shares_bought;
				i.setQuantity(quantity);
				break;
			}
		}

		for (Companies i : list_of_companies) {
			if (symbol.equals(i.getSymbol())) {
				// Adding balance of sold shares
				i.setBalance(i.getBalance() + total_value_of_shares);

				// Substracting Number of shares sold
				i.setShares(i.getShares() - number_of_shares_bought);
			}
		}
		System.out.println("Want to save transaction then press 1 else press 0");
		int choice = Util.readInt();
		if (choice == 1) {
			save(list_of_buyers, list_of_companies);
		}
		return;

	}

	void sell(int amount, String symbol) throws JsonParseException, JsonMappingException, IOException {
		List<StockHolders> list_of_sellers = readStockHolder();
		List<Companies> list_of_companies = readCompanies();

		System.out.println("Enter name of Seller");
		String seller = Util.readString();

		int flag_seller_cheak = 0;
		int balance_of_seller = 0;
		StockHolders index_of_seller = null;
		for (StockHolders i : list_of_sellers) {
			if (seller.equals(i.getName())) {
				index_of_seller = i;
				flag_seller_cheak = 1;
				balance_of_seller = i.getBalance();
				break;
			}
		}

		// Check seller has account
		if (flag_seller_cheak != 1) {
			System.out.println("seller has no account");
			return;
		}
		// Check seller have shares of requested company
		String[] shares = index_of_seller.getShareholding();
		boolean check_company = false;
		int index_of_required_symbol = 0;
		for (int i = 0; i < shares.length; i++) {
			if (symbol.equals(shares[i])) {
				index_of_required_symbol = i;
				check_company = true;
			}
		}
		if (check_company == false) {
			System.out.println("Seller donot have requested company shares");
			return;
		}
		// Check seller have sufficient shares
		int price_per_share = 0;
		boolean flag_symbol_cheak=false;
		Companies index_of_company = null;
		for (Companies i : list_of_companies) {
			if (symbol.equals(i.getSymbol())) {
				index_of_company=i;
				flag_symbol_cheak=true;
				price_per_share = i.getPrice();
			}
		}
		int quantity[] = index_of_seller.getQuantity();
		if (amount > quantity[index_of_required_symbol] * price_per_share) {
			System.out.println("Seller do not have sufficient number of shares");
			return;
		}

		// Check buyer enterd sufficient amount to buy atleast one share
		if (amount < price_per_share) {
			System.out.println("Entered amount is less than price of one share");
			return;
		}

		// Check requested company is listed at Stock exchange
		if (flag_symbol_cheak==false) {
			System.out.println("Requested company is not listesd in stock exchange");
			return;
		}
		if(amount>index_of_company.getBalance())
		{
			System.out.println("Company do not have sufficient balance");
			return;
		}
		
		int number_of_shares_sold = amount / price_per_share;
		int total_value_of_shares = number_of_shares_sold * price_per_share;
		index_of_company.setBalance(index_of_company.getBalance()-total_value_of_shares);
		index_of_company.setShares(index_of_company.getShares()+number_of_shares_sold);
		
		index_of_seller.setBalance(index_of_seller.getBalance()+total_value_of_shares);
		quantity[index_of_required_symbol]= quantity[index_of_required_symbol]-number_of_shares_sold;
		index_of_seller.setQuantity(quantity);
		
		System.out.println("Want to save then press 1 else press 0");
		int choice = Util.readInt();
		if(choice==1)
		{
			save(list_of_sellers,list_of_companies);
		}
		return;
	}

	void save(List<StockHolders> list_of_buyers, List<Companies> list_of_companies)
			throws JsonGenerationException, JsonMappingException, IOException {
		for (Companies i : list_of_companies) {
			System.out.println(i.getBalance() + "\t" + i.getShares());
		}
		ObjectMapper mapper = new ObjectMapper();
		mapper.writeValue(new File(path_of_stockHolder), list_of_buyers);
		mapper.writeValue(new File(path_of_companies), list_of_companies);
	}

	public static void main(String[] args) throws JsonParseException, JsonMappingException, IOException {
		StockAccount abc = new StockAccount();
		abc.buy(100, "Amdocs");
//		String path ="/home/user/eclipse-workspace/com.bridgeLabz.OOP/src/main/java/com/bridgeLabz/objectOrientedPrograms/stockholders.json";
//		ObjectMapper mapper = new ObjectMapper();
//		
//		//mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
//		List<StockHolders> al
//		=mapper.readValue(new File(path), new TypeReference<List<StockHolders>>() {
//		});
//		System.out.println(al.get(0).getBalance());
//		
//		for(StockHolders s:al)
//		{
//			System.out.println(s.getShareholding());
//		}
	}

}
